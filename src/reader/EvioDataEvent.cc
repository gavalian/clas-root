/**
* Autogenerated Source File for TEvioFileReader
* \\file TEvioFileReader.cc
* \\author G.Gavalian
* \\date 2012-07-14
*/
#include "EvioDataEvent.h"
#include "evio.h"
#include "evioUtil.hxx"
#include "evioBankIndex.hxx"

/**
 * Default constructor the internal buffer is empty.
 */
EvioDataEvent::EvioDataEvent()
{
}
/**
 * Copy constructor.
 * @param orig
 * @return 
 */
EvioDataEvent::EvioDataEvent(const EvioDataEvent& orig)
{
    memcpy(buffer,orig.buffer,MAXEVIOBUFFER);
}
/**
 * constructor takes pointer to the data, and copies it to internal buffer.
 */
EvioDataEvent::EvioDataEvent(uint32_t *ptr, int len)
{
  init(ptr,len);
}
/**
 * Default Distructor.
 */
EvioDataEvent::~EvioDataEvent()
{
}
/**
 * initilizes the event with given evio buffer.
 */
void EvioDataEvent::init(uint32_t *ptr, int len)
{
  memcpy(buffer,ptr,len*sizeof(int32_t));
}
/**
 * returns a bank containing double and int arrays filled from a data bank 
 * with given tag and num.
 */
void EvioDataEvent::getBank(EvioDataBank &bank, int tag, int num)
{
    bank.clear();
}
/**
 * returns a double vector containing data from a leaf for given tag and num.
 */
vector<double>  *EvioDataEvent::getDoubleVector(int tag, int num)
{
  evio::evioBankIndex b0(buffer,0);
  evio::bankIndex b;
  if(b0.tagNumExists(evio::tagNum(tag,num))){
    b = b0.getBankIndex(evio::tagNum(tag,num));
    int dataLength;
    const double *data_ptr = b0.getData<double>(b,&dataLength);
    vector<double> *vec_ptr = new vector<double>(dataLength);
    memcpy(vec_ptr->data(),data_ptr,dataLength*sizeof(double));
    return vec_ptr;
  }
  return new vector<double>();
}

vector<float>  *EvioDataEvent::getFloatVector(int tag, int num)
{
  evio::evioBankIndex b0(buffer,0);
  evio::bankIndex b;
  if(b0.tagNumExists(evio::tagNum(tag,num))){
    b = b0.getBankIndex(evio::tagNum(tag,num));
    int dataLength;
    const float *data_ptr = b0.getData<float>(b,&dataLength);
    vector<float> *vec_ptr = new vector<float>(dataLength);
    memcpy(vec_ptr->data(),data_ptr,dataLength*sizeof(float));
    return vec_ptr;
  }
  return new vector<float>();
}

/**
 * returns a integer vector containing data from a leaf for given tag and num.
 */
vector<int32_t> *EvioDataEvent::getIntegerVector(int tag, int num)
{
  evio::evioBankIndex b0(buffer,0);
  evio::bankIndex b;
  if(b0.tagNumExists(evio::tagNum(tag,num))){
    b = b0.getBankIndex(evio::tagNum(tag,num));
    int dataLength;
    const int32_t *data_ptr = b0.getData<int32_t>(b,&dataLength);
    vector<int32_t> *vec_ptr = new vector<int32_t>(dataLength);
    memcpy(vec_ptr->data(),data_ptr,dataLength*sizeof(int32_t));
    return vec_ptr;
  }
  return new vector<int32_t>();
}
