/**
* Autogenerated Header File for EvioBankIndex
* \\file EvioBankIndex.h
* \\author G.Gavalian
* \\date 2014-09-28
*/
#ifndef __EVIOBANKINDEX__
#define __EVIOBANKINDEX__
#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <map>
#include <iostream>
#include <iomanip>
#include <sstream>
#include "common_std.h"

using namespace std;
//! A Brief Description
/*
 * A detailed description
 */

struct bankIndex_t{

  uint32_t   header;
  uint32_t   length;
  uint32_t   type;
  uint32_t   offset;
  const  void   *data;
  
  int getTag() {
  	return (header>>16);
  }

 int getNum(){
 	return (header&0xff);
 } 

 int getType(){
 	return (header>>8)&0x3f;
 }

 int getPadding(){
	return (header>>14)&0x3;
 }
 
 uint32_t  getHash(uint32_t tag, uint8_t num){
 	return (tag<<16)|(num);
 }

 bankIndex_t() : header(0){

 }

 void set(uint32_t tag, uint8_t num, uint8_t dtype, uint32_t dlength, uint32_t doffset){
 	header = (tag<<16)|(dtype<<8)|(num);
 	offset = doffset;
 	length = dlength;
 }

 bankIndex_t(uint32_t t, uint8_t n, uint8_t tp){
 	header = (t<<16)|(tp<<8)|(n);
 }
} ;


class EvioBankIndex  {

private:

	map<uint32_t,bankIndex_t>  evioIndex;
	bankIndex_t                indexInfo;
	
	void *leafHandler(int bankLength, int containerType, int contentType, uint16_t tag, uint8_t num, int depth, 
                                   const uint32_t *bankPointer, int dataLength, const void *data, void *userArg);
	
	/*void *leafHandler(int bankLength, int containerType, int contentType, uint16_t tag, uint8_t num, int depth, 
		                                   const uint32_t *bankPointer, int dataLength, int dataOffset, void *userArg);*/
	void *containerHandler(int bankLength, int containerType, int contentType, uint16_t tag, uint8_t num, int depth, 
                                        const uint32_t *bankPointer, int payloadLength, const uint32_t *payload, void *userArg);
	void *parseBank(const uint32_t *buf, int bankType, int depth, 
                           				void *userArg);
public:

/** Default Constructor */
EvioBankIndex();
/** Default Destructor */
~EvioBankIndex();
/** Copy Constructor if one is needed */
/*EvioBankIndex( const EvioBankIndex &obj); */ 

void  initBankIndex(uint32_t *buffer);
const void    *getBank(uint32_t tag, uint8_t num, int *len);


void list();
/** An operator = if one is needed */
/* const EvioBankIndex &operator=(const EvioBankIndex &obj); */


};
#endif
