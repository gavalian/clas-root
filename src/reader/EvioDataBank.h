/**
* Autogenerated Header File for TEvioFileReader
* \\file TEvioFileReader.h
* \\author G.Gavalian
* \\date 2012-07-14
*/

#ifndef __EVIODATABANK__
#define __EVIODATABANK__

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <map>
#include "EvioDataDescriptor.h"

#include "common_std.h"

//#ifndef MAXEVIOBUF
//#define MAXEVIOBUF   4000000
//#endif

using namespace std;

//using namespace evio;
//! A Brief Description
/*
 * A detailed description
 */

class EvioDataBank {

private:

  map< int , vector<double>  >   doubleContainer;
  map< int , vector<int32_t> >   integerContainer;
  EvioDataDescriptor             bankDescriptor;
  //void *evioChan;
  //evioFileChannel *evioChan;

public:

//uint32_t  buffer[2];
/** Default Constructor */
    EvioDataBank();
    EvioDataBank(EvioDataDescriptor &desc);
    EvioDataBank(int tag, const char *format);
    
    /** Default Destructor */
    ~EvioDataBank();
    /** Copy Constructor if one is needed */
    /*TEvioFileReader( const TEvioFileReader &obj); */ 
    
    void setDescriptor(int tag, const char *format);
    void setDescriptor(EvioDataDescriptor &desc);
    void   clear();
    void   allocate(int size);
    void   addInteger(int number, vector<int32_t> *array);
    void   addDouble(int number, vector<double> *array);
    
    int        getBankSize();
    double     getDouble(const char *var_name, int index);
    int        getInteger(const char *var_name, int index);
    double     getDouble(int id, int index);
    int        getInteger(int id, int index);
    void       show();
    EvioDataDescriptor *getDescriptor(); 
/** An operator = if one is needed */
/* const TEvioFileReader &operator=(const TEvioFileReader &obj); */

};

#endif
