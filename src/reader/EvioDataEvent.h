/**
 * Autogenerated Header File for TEvioFileReader
 * \\file TEvioFileReader.h
 * \\author G.Gavalian
 * \\date 2012-07-14
 */

#ifndef __EVIODATAEVENT__
#define __EVIODATAEVENT__

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <map>
#include "EvioDataBank.h"
#include "EvioCompositeDecoder.h"
#include "common_std.h"
#include "EvioBankIndex.h"

#ifndef MAXEVIOBUFFER
#define MAXEVIOBUFFER   4000000
#endif

using namespace std;

//using namespace evio;
//! A Brief Description
/*
 * A detailed description
 */

class EvioDataEvent {

private:

  uint32_t buffer[MAXEVIOBUFFER];
  EvioBankIndex   eventBankIndex;
  //const uint32_t *buffer;
  void    *bankIndex;
public:

  EvioDataEvent();
  EvioDataEvent(uint32_t *ptr, int len);
  EvioDataEvent(const EvioDataEvent& orig);
  ~EvioDataEvent();

  void init(const uint32_t *ptr, int len);

  uint32_t         *getEventBuffer()  { return &buffer[0];     };
  EvioBankIndex    &getBankIndex()    { return eventBankIndex; };
  //evio::bankIndex   getBankIndex(int tag, int num);
  int32_t          *geti32 ( int tag, int num , int *len);
  int8_t           *geti8  ( int tag, int num , int *len);
  float            *getf   ( int tag, int num , int *len);
  double           *getd   ( int tag, int num , int *len);

  void              runIndexing();
  
  vector<uint8_t> *getVectorInt8(int tag, int num);
  vector<float>   *getFloatVector(int tag, int num);
  vector<double>  *getDoubleVector(int tag, int num);
  vector<int32_t> *getIntegerVector(int tag, int num);

  void getBank(EvioDataBank &bank, int tag, int num = 0);
  void getList();


  vector<CompositeADC_t>  getCompositeData(int tag, int num);
  uint8_t          getInt8 (char *data, int offset);
  uint16_t         getInt16(char *data, int offset);
  uint32_t         getInt32(char *data, int offset);
   int64_t         getInt64(char *data, int offset);
  void             decodeCompositeData(char *data, int size);
};
#endif
