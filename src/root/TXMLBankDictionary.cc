/**
* Autogenerated Source File for TXMLBankDisctionary
* \\file TXMLBankDisctionary.cc
* \\author G.Gavalian
* \\date 2014-09-29
*/
#include "TXMLBankDictionary.h"


TXMLBankDictionary::TXMLBankDictionary()
{
}
/* 
TXMLBankDisctionary::TXMLBankDisctionary(const TXMLBankDisctionary &obj)
{
}
*/
TXMLBankDictionary::~TXMLBankDictionary()
{
}

void TXMLBankDictionary::ParseFile(const char *env, const char *xmlfile){
	const char *envDir = gSystem->Getenv(env);
	if(envDir==NULL){
		cout << endl << " ERROR : Environment variable [" 
			<<  env << "] is not defined." << endl << endl;
		return;
	}
	string filename = envDir;
	filename.append("/");
	filename.append(xmlfile);
	ParseFile(filename.c_str());
}

/* const TXMLBankDisctionary &TXMLBankDisctionary::operator=(const TXMLBankDisctionary &obj){} */
void  TXMLBankDictionary::ParseFile(const char *xmlFile){

	bankDictionary.Delete();
	cout << "TXMLBankDictionary:: ---> loading file : " << xmlFile << endl;
	TXMLEngine* xml = new TXMLEngine;
	XMLDocPointer_t xmldoc = xml->ParseFile(xmlFile);
	XMLNodePointer_t mainnode = xml->DocGetRootElement(xmldoc);
	string bankTag("bank");
   XMLNodePointer_t child = xml->GetChild(mainnode);
   while (child!=0) {
   	const char *tagname = xml->GetNodeName(child);
   	  //cout << " NODE  NAME = " << xml->GetNodeName(child) << endl;;
   	  if(bankTag.compare(tagname)==0){
   	  	ParseBank(xml,child);
   	  }
      //DisplayNode(xml, child, level+2); 
      child = xml->GetNext(child);
   }
}


void   TXMLBankDictionary::ParseBank(TXMLEngine* xml, XMLNodePointer_t bankNode){

	map<string,string>  attributes = getNodeAttributes(xml,bankNode);
	//XMLAttrPointer_t attr = xml->GetFirstAttr(bankNode);
	//while (attr!=0) {
    //   printf("adding attribute %s %s\n", xml->GetAttrName(attr), xml->GetAttrValue(attr));
    //attributes[string(xml->GetAttrName(attr))] = string(xml->GetAttrValue(attr));
    //   attr = xml->GetNextAttr(attr);  
   	//}
   XMLNodePointer_t child = xml->GetChild(bankNode);
	while (child!=0) {
		ParseSection(xml,child,attributes[string("name")].c_str());
		child = xml->GetNext(child);
	}
	//cout << "---> Parsing bank " << xml->GetAttrValue(attr);
	//XMLNodePointer_t child = xml->GetChild(mainnode);
}

void   TXMLBankDictionary::ParseSection(TXMLEngine* xml, XMLNodePointer_t sectionNode, const char *bankname){
	map<string,string> attributes = getNodeAttributes(xml,sectionNode);	
	//cout << "parsing bank " << bankname << " section " << endl;
	string sectionName = bankname;
	sectionName.append("::");
	sectionName.append(attributes["name"].c_str());
	
	int tag = atoi(attributes["tag"].c_str());

	TBankDescriptor  *descriptor = new TBankDescriptor(sectionName.c_str());
	XMLNodePointer_t child = xml->GetChild(sectionNode);
	while (child!=0) {
		map<string, string> mapcol = getNodeAttributes(xml,child);
		string typestring = "I";
		/*
		switch (mapcol["type"].c_str()){
			case "int8"    : typestring = "C"; break;
			case "float32" : typestring = "F"; break;
			case "float64" : typestring = "D"; break;
			case "int32"   : typestring = "I"; break;
			default: typestring = "I";
		}*/
		if(mapcol["type"].compare("float32")==0) typestring = "F";
		if(mapcol["type"].compare("float64")==0) typestring = "D";
		if(mapcol["type"].compare("int16") ==0) typestring = "S";
		if(mapcol["type"].compare("int8")  ==0) typestring = "C";

		int num = atoi(mapcol["num"].c_str());
		descriptor->AddEntry(mapcol["name"].c_str(),typestring.c_str(), tag,num);
		//cout << bankname << " " <<  attributes["name"] << " " << attributes[string("tag")].c_str() 
		//	<< "  " << mapcol[string("name")] << " " << mapcol["num"] << endl; 
		child = xml->GetNext(child);
	}
	cout << "(" << descriptor->GetName() << ")" <<  descriptor->GetFormatString() << endl;
	bankDictionary.Add(descriptor);
}

map<string,string>   TXMLBankDictionary::getNodeAttributes(TXMLEngine* xml, XMLNodePointer_t node){
	map<string,string>  attributes;
	XMLAttrPointer_t attr = xml->GetFirstAttr(node);
	while (attr!=0) {
       //printf("adding attribute %s %s\n", xml->GetAttrName(attr), xml->GetAttrValue(attr));
       attributes[string(xml->GetAttrName(attr))] = string(xml->GetAttrValue(attr));
       attr = xml->GetNextAttr(attr);  
   }
   return attributes;
}



TList    &TXMLBankDictionary::GetList(){
	return bankDictionary;
}



