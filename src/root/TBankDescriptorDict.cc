//
// File generated by /opt/local/libexec/root5/bin/rootcint at Wed Oct 22 09:55:52 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIrootdITBankDescriptorDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TBankDescriptorDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TBankDescriptor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TBankDescriptor(void *p = 0);
   static void *newArray_TBankDescriptor(Long_t size, void *p);
   static void delete_TBankDescriptor(void *p);
   static void deleteArray_TBankDescriptor(void *p);
   static void destruct_TBankDescriptor(void *p);
   static void streamer_TBankDescriptor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TBankDescriptor*)
   {
      ::TBankDescriptor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBankDescriptor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBankDescriptor", ::TBankDescriptor::Class_Version(), "./src/root/TBankDescriptor.h", 21,
                  typeid(::TBankDescriptor), DefineBehavior(ptr, ptr),
                  &::TBankDescriptor::Dictionary, isa_proxy, 0,
                  sizeof(::TBankDescriptor) );
      instance.SetNew(&new_TBankDescriptor);
      instance.SetNewArray(&newArray_TBankDescriptor);
      instance.SetDelete(&delete_TBankDescriptor);
      instance.SetDeleteArray(&deleteArray_TBankDescriptor);
      instance.SetDestructor(&destruct_TBankDescriptor);
      instance.SetStreamerFunc(&streamer_TBankDescriptor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TBankDescriptor*)
   {
      return GenerateInitInstanceLocal((::TBankDescriptor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBankDescriptor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr TBankDescriptor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TBankDescriptor::Class_Name()
{
   return "TBankDescriptor";
}

//______________________________________________________________________________
const char *TBankDescriptor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBankDescriptor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBankDescriptor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBankDescriptor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBankDescriptor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBankDescriptor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBankDescriptor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBankDescriptor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TBankDescriptor::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBankDescriptor.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      { TString R__str; R__str.Streamer(R__b); descName = R__str.Data(); }
      {
         vector<pair<int,int> > &R__stl =  entryTagNum;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(pair<int,int>));
         if (R__tcl1==0) {
            Error("entryTagNum streamer","Missing the TClass object for pair<int,int>!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            pair<int,int> R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<pair<string,string> > &R__stl =  entryNameType;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(pair<string,string>));
         if (R__tcl1==0) {
            Error("entryNameType streamer","Missing the TClass object for pair<string,string>!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            pair<string,string> R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, TBankDescriptor::IsA());
   } else {
      R__c = R__b.WriteVersion(TBankDescriptor::IsA(), kTRUE);
      TObject::Streamer(R__b);
      { TString R__str = descName.c_str(); R__str.Streamer(R__b);}
      {
         vector<pair<int,int> > &R__stl =  entryTagNum;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(pair<int,int>));
         if (R__tcl1==0) {
            Error("entryTagNum streamer","Missing the TClass object for pair<int,int>!");
            return;
         }
            vector<pair<int,int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((pair<int,int>*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<pair<string,string> > &R__stl =  entryNameType;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(pair<string,string>));
         if (R__tcl1==0) {
            Error("entryNameType streamer","Missing the TClass object for pair<string,string>!");
            return;
         }
            vector<pair<string,string> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((pair<string,string>*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TBankDescriptor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBankDescriptor.
      TClass *R__cl = ::TBankDescriptor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "descName", (void*)&descName);
      R__insp.InspectMember("string", (void*)&descName, "descName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "entryTagNum", (void*)&entryTagNum);
      R__insp.InspectMember("vector<pair<int,int> >", (void*)&entryTagNum, "entryTagNum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "entryNameType", (void*)&entryNameType);
      R__insp.InspectMember("vector<pair<string,string> >", (void*)&entryNameType, "entryNameType.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TBankDescriptor(void *p) {
      return  p ? new(p) ::TBankDescriptor : new ::TBankDescriptor;
   }
   static void *newArray_TBankDescriptor(Long_t nElements, void *p) {
      return p ? new(p) ::TBankDescriptor[nElements] : new ::TBankDescriptor[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBankDescriptor(void *p) {
      delete ((::TBankDescriptor*)p);
   }
   static void deleteArray_TBankDescriptor(void *p) {
      delete [] ((::TBankDescriptor*)p);
   }
   static void destruct_TBankDescriptor(void *p) {
      typedef ::TBankDescriptor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBankDescriptor(TBuffer &buf, void *obj) {
      ((::TBankDescriptor*)obj)->::TBankDescriptor::Streamer(buf);
   }
} // end of namespace ROOT for class ::TBankDescriptor

namespace ROOT {
   void vectorlEpairlEintcOintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEintcOintgRsPgR_Dictionary();
   static void *new_vectorlEpairlEintcOintgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEintcOintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEintcOintgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEintcOintgRsPgR(void *p);
   static void destruct_vectorlEpairlEintcOintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<int,int> >*)
   {
      vector<pair<int,int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<int,int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<int,int> >", -2, "/opt/local/libexec/root5/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<pair<int,int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEintcOintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<int,int> >) );
      instance.SetNew(&new_vectorlEpairlEintcOintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEintcOintgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEintcOintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEintcOintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEintcOintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pair<int,int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<int,int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEintcOintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pair<int,int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpairlEintcOintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<int,int> > : new vector<pair<int,int> >;
   }
   static void *newArray_vectorlEpairlEintcOintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<int,int> >[nElements] : new vector<pair<int,int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEintcOintgRsPgR(void *p) {
      delete ((vector<pair<int,int> >*)p);
   }
   static void deleteArray_vectorlEpairlEintcOintgRsPgR(void *p) {
      delete [] ((vector<pair<int,int> >*)p);
   }
   static void destruct_vectorlEpairlEintcOintgRsPgR(void *p) {
      typedef vector<pair<int,int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pair<int,int> >

namespace ROOT {
   void vectorlEpairlEstringcOstringgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEstringcOstringgRsPgR_Dictionary();
   static void *new_vectorlEpairlEstringcOstringgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEstringcOstringgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEstringcOstringgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEstringcOstringgRsPgR(void *p);
   static void destruct_vectorlEpairlEstringcOstringgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<string,string> >*)
   {
      vector<pair<string,string> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<string,string> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<string,string> >", -2, "/opt/local/libexec/root5/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<pair<string,string> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEstringcOstringgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<string,string> >) );
      instance.SetNew(&new_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEstringcOstringgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pair<string,string> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<string,string> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEstringcOstringgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pair<string,string> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<string,string> > : new vector<pair<string,string> >;
   }
   static void *newArray_vectorlEpairlEstringcOstringgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<string,string> >[nElements] : new vector<pair<string,string> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      delete ((vector<pair<string,string> >*)p);
   }
   static void deleteArray_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      delete [] ((vector<pair<string,string> >*)p);
   }
   static void destruct_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      typedef vector<pair<string,string> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pair<string,string> >

/********************************************************
* src/root/TBankDescriptorDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTBankDescriptorDict();

extern "C" void G__set_cpp_environmentTBankDescriptorDict() {
  G__cpp_reset_tagtableTBankDescriptorDict();
}
#include <new>
extern "C" int G__cpp_dllrevTBankDescriptorDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TBankDescriptor */
static int G__TBankDescriptorDict_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBankDescriptor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBankDescriptor[n];
     } else {
       p = new((void*) gvp) TBankDescriptor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBankDescriptor;
     } else {
       p = new((void*) gvp) TBankDescriptor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBankDescriptor* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBankDescriptor((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TBankDescriptor((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBankDescriptor*) G__getstructoffset())->Copy((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(TBankDescriptor*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBankDescriptor*) G__getstructoffset())->Copy(*(TBankDescriptor*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBankDescriptor*) G__getstructoffset())->AddEntry((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBankDescriptor*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TBankDescriptor*) G__getstructoffset())->isInt8((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TBankDescriptor*) G__getstructoffset())->isInt32((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TBankDescriptor*) G__getstructoffset())->isInt16((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TBankDescriptor*) G__getstructoffset())->isFloat((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TBankDescriptor*) G__getstructoffset())->isDouble((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((TBankDescriptor*) G__getstructoffset())->GetFormatString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBankDescriptor*) G__getstructoffset())->GetTag((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBankDescriptor*) G__getstructoffset())->GetNum((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TBankDescriptor*) G__getstructoffset())->GetName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TBankDescriptor*) G__getstructoffset())->GetEntryName((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TBankDescriptor*) G__getstructoffset())->GetEntryType((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBankDescriptor*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBankDescriptor*) G__getstructoffset())->SetName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBankDescriptor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBankDescriptor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBankDescriptor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBankDescriptor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBankDescriptor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBankDescriptor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBankDescriptor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBankDescriptor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TBankDescriptorDict_215_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBankDescriptor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TBankDescriptorDict_215_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TBankDescriptor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TBankDescriptor(*(TBankDescriptor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBankDescriptor G__TTBankDescriptor;
static int G__TBankDescriptorDict_215_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBankDescriptor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBankDescriptor*) (soff+(sizeof(TBankDescriptor)*i)))->~G__TTBankDescriptor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBankDescriptor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBankDescriptor*) (soff))->~G__TTBankDescriptor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TBankDescriptorDict_215_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBankDescriptor* dest = (TBankDescriptor*) G__getstructoffset();
   *dest = *(TBankDescriptor*) libp->para[0].ref;
   const TBankDescriptor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TBankDescriptor */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTBankDescriptorDict {
 public:
  G__Sizep2memfuncTBankDescriptorDict(): p(&G__Sizep2memfuncTBankDescriptorDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTBankDescriptorDict::*p)();
};

size_t G__get_sizep2memfuncTBankDescriptorDict()
{
  G__Sizep2memfuncTBankDescriptorDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTBankDescriptorDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor))) {
     TBankDescriptor *G__Lderived;
     G__Lderived=(TBankDescriptor*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor),G__get_linked_tagnum(&G__TBankDescriptorDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTBankDescriptorDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,string> >",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TBankDescriptor */
static void G__setup_memvarTBankDescriptor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor));
   { TBankDescriptor *p; p=(TBankDescriptor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_string),-1,-1,4,"descName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),G__defined_typename("vector<pair<int,int> >"),-1,4,"entryTagNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),G__defined_typename("vector<pair<string,string> >"),-1,4,"entryNameType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TBankDescriptorDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTBankDescriptorDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTBankDescriptor(void) {
   /* TBankDescriptor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor));
   G__memfunc_setup("TBankDescriptor",1519,G__TBankDescriptorDict_215_0_1, 105, G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBankDescriptor",1519,G__TBankDescriptorDict_215_0_2, 105, G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__TBankDescriptorDict_215_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - name i - - 0 - tag "
"u 'TBankDescriptor' - 1 - desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__TBankDescriptorDict_215_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBankDescriptor' - 1 - desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEntry",795,G__TBankDescriptorDict_215_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - type "
"i - - 0 - tag i - - 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__TBankDescriptorDict_215_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInt8",575,G__TBankDescriptorDict_215_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInt32",620,G__TBankDescriptorDict_215_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInt16",622,G__TBankDescriptorDict_215_0_9, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFloat",722,G__TBankDescriptorDict_215_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDouble",823,G__TBankDescriptorDict_215_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormatString",1536,G__TBankDescriptorDict_215_0_12, 117, G__get_linked_tagnum(&G__TBankDescriptorDictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTag",572,G__TBankDescriptorDict_215_0_13, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,G__TBankDescriptorDict_215_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__TBankDescriptorDict_215_0_15, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryName",1203,G__TBankDescriptorDict_215_0_16, 67, -1, -1, 0, 1, 1, 1, 1, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryType",1236,G__TBankDescriptorDict_215_0_17, 67, -1, -1, 0, 1, 1, 1, 1, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TBankDescriptorDict_215_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,G__TBankDescriptorDict_215_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TBankDescriptorDict_215_0_20, 85, G__get_linked_tagnum(&G__TBankDescriptorDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBankDescriptor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TBankDescriptorDict_215_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBankDescriptor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TBankDescriptorDict_215_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBankDescriptor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TBankDescriptorDict_215_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBankDescriptor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TBankDescriptorDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TBankDescriptorDict_215_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TBankDescriptorDict_215_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBankDescriptor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TBankDescriptorDict_215_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBankDescriptor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TBankDescriptorDict_215_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBankDescriptor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TBankDescriptorDict_215_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBankDescriptor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TBankDescriptor", 1519, G__TBankDescriptorDict_215_0_32, (int) ('i'), G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor), -1, 0, 1, 1, 1, 0, "u 'TBankDescriptor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TBankDescriptor", 1645, G__TBankDescriptorDict_215_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TBankDescriptorDict_215_0_34, (int) ('u'), G__get_linked_tagnum(&G__TBankDescriptorDictLN_TBankDescriptor), -1, 1, 1, 1, 1, 0, "u 'TBankDescriptor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTBankDescriptorDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTBankDescriptorDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTBankDescriptorDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TBankDescriptorDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_TBankDescriptor = { "TBankDescriptor" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR = { "vector<pair<int,int>,allocator<pair<int,int> > >" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,int>,allocator<pair<int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR = { "vector<pair<string,string>,allocator<pair<string,string> > >" , 99 , -1 };
G__linked_taginfo G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<string,string>,allocator<pair<string,string> > >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTBankDescriptorDict() {
  G__TBankDescriptorDictLN_TClass.tagnum = -1 ;
  G__TBankDescriptorDictLN_TBuffer.tagnum = -1 ;
  G__TBankDescriptorDictLN_TMemberInspector.tagnum = -1 ;
  G__TBankDescriptorDictLN_TObject.tagnum = -1 ;
  G__TBankDescriptorDictLN_string.tagnum = -1 ;
  G__TBankDescriptorDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_TBankDescriptor.tagnum = -1 ;
  G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTBankDescriptorDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_string);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_TBankDescriptor),sizeof(TBankDescriptor),-1,62720,(char*)NULL,G__setup_memvarTBankDescriptor,G__setup_memfuncTBankDescriptor);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TBankDescriptorDictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupTBankDescriptorDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTBankDescriptorDict()");
  G__set_cpp_environmentTBankDescriptorDict();
  G__cpp_setup_tagtableTBankDescriptorDict();

  G__cpp_setup_inheritanceTBankDescriptorDict();

  G__cpp_setup_typetableTBankDescriptorDict();

  G__cpp_setup_memvarTBankDescriptorDict();

  G__cpp_setup_memfuncTBankDescriptorDict();
  G__cpp_setup_globalTBankDescriptorDict();
  G__cpp_setup_funcTBankDescriptorDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTBankDescriptorDict();
  return;
}
class G__cpp_setup_initTBankDescriptorDict {
  public:
    G__cpp_setup_initTBankDescriptorDict() { G__add_setup_func("TBankDescriptorDict",(G__incsetup)(&G__cpp_setupTBankDescriptorDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTBankDescriptorDict() { G__remove_setup_func("TBankDescriptorDict"); }
};
G__cpp_setup_initTBankDescriptorDict G__cpp_setup_initializerTBankDescriptorDict;

