/**
* Autogenerated Source File for TEvioFileReader
* \\file TEvioFileReader.cc
* \\author G.Gavalian
* \\date 2012-07-14
*/
#include "TEvioFileReader.h"
#include "TEvioDataBank.h"

#include "evio.h"
#include "evioUtil.hxx"

ClassImp(TEvioFileReader)

TEvioFileReader::TEvioFileReader()
{
  //cout << "*********************************************************" << endl;
  //cout << "*  Initializing EvioROOT library implementing interface *" << endl;
  //cout << "*********************************************************" << endl;
  
}
/*
TEvioFileReader::TEvioFileReader(const TEvioFileReader &obj)
{
}
*/

TEvioFileReader::~TEvioFileReader()
{
}

void TEvioFileReader::close()
{
    //evClose(evioFileHandle);
    reader.close();
}

void TEvioFileReader::open(const char *filename)
{
  reader.open(filename);
}

bool TEvioFileReader::next()
{
  return reader.next();
}

TArrayI *TEvioFileReader::getArrayInt(int tag, int num)
{
  vector<int32_t>      *data = reader.getIntVector(tag,num);
  TArrayI *array_ptr = new TArrayI();
  array_ptr->Set(data->size(),data->data());
  return array_ptr;
  //return new TArrayI();
}

void       TEvioFileReader::getBank(TEvioDataBank& bank,int tag, int num)
{

  bank.clear();
  evio::evioDOMTree event(buffer);
  evio::evioDOMNodeList::const_iterator iter;
  evio::evioDOMNodeListP nodeList = event.getNodeList(evio::parentTagNumEquals(tag, 200));
  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP   node = *iter;
    int node_num = node->num;
    vector<int32_t>      *data = node->getVector<int32_t>();
    bank.addInteger(node_num,data);
  }

  evio::evioDOMNodeListP nodeListD = event.getNodeList(evio::parentTagNumEquals(tag, 100));
  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP   node = *iter;
    int node_num = node->num;
    vector<double>      *data = node->getVector<double>();
    bank.addDouble(node_num,data);
  }
}

TEvioDataBank *TEvioFileReader::getBank(int tag, int num)
{
  TEvioDataBank *dataBank = new TEvioDataBank();
  evio::evioDOMTree event(buffer);

  evio::evioDOMNodeList::const_iterator iter;
  evio::evioDOMNodeListP nodeList = event.getNodeList(evio::parentTagNumEquals(tag, 200));
  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP   node = *iter;
    int node_num = node->num;
      vector<int32_t>      *data = node->getVector<int32_t>();
      dataBank->addInteger(node_num,data);
  }
  
  evio::evioDOMNodeListP nodeListD = event.getNodeList(evio::parentTagNumEquals(tag, 100));
  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP   node = *iter;
    int node_num = node->num;
    vector<double>      *data = node->getVector<double>();
    dataBank->addDouble(node_num,data);
  }
  return dataBank;
}

TArrayD *TEvioFileReader::getArrayDouble(int tag, int num)
{
  TArrayD *newArray = new TArrayD();
  evio::evioDOMTree event(buffer);
  evio::evioDOMNodeListP nodeList = event.getNodeList(evio::parentTagNumEquals(tag, 200));
  evio::evioDOMNodeList::const_iterator iter;
  //cout << " looking for num = " << num << endl;
  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP   node = *iter;
    int node_num = node->num;
    if(node_num == num){
      vector<double>      *data = node->getVector<double>();
      //cout << "tag = " << tag  << " num = " <<  num
      //<< "data length = " << data->size() << endl;
      newArray->Set(data->size(),data->data());
      return newArray;
    }
  }
  /*vector<double> *vectorData = getDoubleVector(tag,num);
    if(vectorData!=NULL){
    cout << "received the array and it is not NULL. size = " << vectorData->size() << endl;
    newArray->Set(vectorData->size(),vectorData->data());
    return newArray;
    }*/
  newArray->Set(0);
  return newArray;
}



vector<double>  *TEvioFileReader::getDoubleVector(int tag, int num)
{
  evio::evioDOMTree event(buffer);
  evio::evioDOMNodeListP nodeList = event.getNodeList(evio::parentTagNumEquals(tag, 200));
  evio::evioDOMNodeList::const_iterator iter;
  cout << " looking for num = " << num << endl;
  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP   node = *iter;
    int node_num = node->num;
    if(node_num == num){
      vector<double>      *data = node->getVector<double>();
      cout << "tag = " << tag << " num = " <<  num 
	   << "  data length = " << data->size() << endl;
      return data;
    }
    //cout << " data length = " << data->size() << endl;
  }
  return NULL;
}
/**
 * Returns an event from the file.
 * @param event
 */
void TEvioFileReader::getEvent(TEvioDataEvent &event)
{
    //int read_status = evRead(evioFileHandle,buffer,MAXEVIOBUF);
    reader.getEvent(event.getDataEvent());
    //event.init(buffer,MAXEVIOBUF);
}
/*
void TEvioFileReader::getEvent()
{

  uint32_t buffer[MAXEVIOBUF];
  int read_status = evRead(evioFileHandle,buffer,MAXEVIOBUF);

  evio::evioDOMTree event(buffer);
  evio::evioDOMNodeListP nodeList = event.getNodeList(evio::parentTagNumEquals(60, 100));
  //vector<int32_t>       *data     = node->getVector<std::int32_t>();

  evio::evioDOMNodeList::const_iterator iter;

  for(iter=nodeList->begin(); iter!=nodeList->end(); iter++){
    evio::evioDOMNodeP node = *iter;
    vector<int32_t>       *data     = node->getVector<std::int32_t>();
    cout << " data length = " << data->size() << endl;
  }

  cout << " first byte = " << buffer[0] << endl;
}*/
/* const TEvioFileReader &TEvioFileReader::operator=(const TEvioFileReader &obj){} */
