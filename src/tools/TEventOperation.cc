/**
* Autogenerated Source File for TEventOperation
* \\file TEventOperation.cc
* \\author G.Gavalian
* \\date 2013-10-28
*/
#include "TEventOperation.h"


ClassImp(TEventOperation)

TEventOperation::TEventOperation()
{
}
/* 
TEventOperation::TEventOperation(const TEventOperation &obj)
{
}
*/
TEventOperation::~TEventOperation()
{
}

TLorentzVector  TEventOperation::getVector()
{
  TLorentzVector vect;
  vect.SetPxPyPzE(operParticle.Px(),operParticle.Py(),operParticle.Pz(),operParticle.Energy());
  return vect;
}

void TEventOperation::AddOperand(int sign, int pid, int order)
{
  operSigns.push_back(sign);
  operPids.push_back(pid);
  operOrders.push_back(order);
}

void TEventOperation::Clear()
{
  operSigns.clear();
  operPids.clear();
  operOrders.clear();
}

void TEventOperation::PrintParticle()
{
  cout << "Particle " << operParticle.Px() << "  " << operParticle.Py() << "  "
       << operParticle.Pz() << endl;
}

void TEventOperation::Print()
{
  cout << " EVENT OPERATION " << endl;
  for(int loop = 0; loop < operSigns.size() ; loop ++){
    cout << operSigns[loop] << "  " << operPids[loop] << "  " << operOrders[loop] << endl;
  }
  cout << " EVENT OPERATION " << endl;
}

double     TEventOperation::Mass()
{
  double mass2 = Mass2();
  if(mass2<0.0) return TMath::Sqrt(-mass2);
  return TMath::Sqrt(mass2);
}

double     TEventOperation::Mass2()
{
  double mass2 = 
    operParticle.Energy()*operParticle.Energy() -
    (operParticle.Px()*operParticle.Px() + 
     operParticle.Py()*operParticle.Py() + 
     operParticle.Pz()*operParticle.Pz());
  return mass2;
}

double     TEventOperation::Theta()
{
  operParticle.Theta();
}

double     TEventOperation::Phi()
{
  return operParticle.Phi();
}

double     TEventOperation::P(){
  return TMath::Sqrt(
		     operParticle.Px()*operParticle.Px() + 
		     operParticle.Py()*operParticle.Py() + 
		     operParticle.Pz()*operParticle.Pz());
}

vector<string> TEventOperation::stringTokenize(const string &_str,const string &_delim)
{
  vector<string> tokens;
  string::size_type lastPos = _str.find_first_not_of(_delim, 0);
  string::size_type pos = _str.find_first_of(_delim, lastPos);
  while (string::npos != pos || string::npos != lastPos)
    {
      // found a token, add it to the vector.
      tokens.push_back(_str.substr(lastPos, pos - lastPos));
      // skip delimiters.  Note the "not_of"
      lastPos = _str.find_first_not_of(_delim, pos);      
      // find next "non-delimiter"
      pos = _str.find_first_of(_delim, lastPos);
    }
  return tokens;
}

void   TEventOperation::Parse(const char *operation)
{
  string oper_string(operation);
  if(oper_string[0]=='[') oper_string.insert(0,"+");
  //cout << "Parsing = [" << oper_string << "]" << endl;
  //vector<string>  tokens = stringTokenize(oper_string,string("["));
  vector<string>  tokens = expressionTokenize(oper_string);
  for(int loop = 0; loop < tokens.size(); loop++)
    {
      int sign = +1;
      if(tokens[loop][0]=='-') sign = -1;
      vector<string> id_ord = stringTokenize(tokens[loop].substr(2,tokens[loop].length()-3),string(","));
      if(id_ord.size()==1){
	if(id_ord[0][0]=='b'){
	  AddOperand(sign,50001,0);
	} else if(id_ord[0][0]=='t'){
	  AddOperand(sign,50002,0);
	} else AddOperand(sign,atoi(id_ord[0].c_str()),0);
      }
      if(id_ord.size()==2){
	AddOperand(sign,atoi(id_ord[0].c_str()),atoi(id_ord[1].c_str()));
      }
      //cout << " sign = " << tokens[loop].substr(2,tokens[loop].length()-3) << endl;
    }
  //for(int loop = 0; loop < tokens.size(); loop++) cout << " " << tokens[loop] << endl;
}

vector<string> TEventOperation::expressionTokenize(const string &_str)
{
  vector<string> tokens;
  vector<int>    indecies;

  string _delim("[");
  string::size_type lastPos = 0; 
  while(lastPos<=_str.length()){
    lastPos = _str.find_first_of(_delim, lastPos);
    //cout << " pos = " << lastPos << "  size = " << indecies.size() << endl;
    if(lastPos>=0&&lastPos<_str.length()){
      indecies.push_back(lastPos);
      lastPos++;
    }
  }
  
  indecies.push_back(_str.length()+1);

  for(int loop = 0; loop < indecies.size()-1; loop++)
    {
      tokens.push_back(_str.substr(indecies[loop]-1, indecies[loop+1]-indecies[loop]));
    }
  return tokens;
}

/* const TEventOperation &TEventOperation::operator=(const TEventOperation &obj){} */
